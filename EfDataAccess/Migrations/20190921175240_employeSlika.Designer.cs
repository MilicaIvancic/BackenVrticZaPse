// <auto-generated />
using System;
using EfDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfDataAccess.Migrations
{
    [DbContext(typeof(VrticZaPseContext))]
    [Migration("20190921175240_employeSlika")]
    partial class employeSlika
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("Id");

                    b.HasIndex("CertificateName")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Domain.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("NameChronicDisease")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<int>("ZipCode")
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.HasIndex("CityName")
                        .IsUnique();

                    b.HasIndex("ZipCode")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Dog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Alt")
                        .IsRequired();

                    b.Property<DateTime>("BirthDate");

                    b.Property<bool>("Castration");

                    b.Property<string>("Chip")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("ChronicDisease");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DogDescription")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("DogSex")
                        .IsRequired();

                    b.Property<string>("Img")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("RaceId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Dogs");
                });

            modelBuilder.Entity("Domain.DogChronichDisease", b =>
                {
                    b.Property<int>("DogId");

                    b.Property<int>("ChronicDiseaseId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Therapy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("DogId", "ChronicDiseaseId");

                    b.HasIndex("ChronicDiseaseId");

                    b.ToTable("DogChronichDiseases");
                });

            modelBuilder.Entity("Domain.DogEducator", b =>
                {
                    b.Property<int>("DogId");

                    b.Property<int>("EducatorId");

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("UserId");

                    b.HasKey("DogId", "EducatorId");

                    b.HasIndex("EducatorId");

                    b.HasIndex("UserId");

                    b.ToTable("DogEducator");
                });

            modelBuilder.Entity("Domain.DogHeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DogId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<DateTime>("StartAt");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.ToTable("DogHeats");
                });

            modelBuilder.Entity("Domain.DogService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DogId");

                    b.Property<DateTime?>("EndAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.ToTable("DogServices");
                });

            modelBuilder.Entity("Domain.EducetorReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DescriptionText")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int?>("DogEducatorDogId");

                    b.Property<int?>("DogEducatorEducatorId");

                    b.Property<int>("DogEducatorId");

                    b.Property<DateTime?>("EndTimePeriod");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<DateTime>("StartTimePeriod");

                    b.HasKey("Id");

                    b.HasIndex("DogEducatorDogId", "DogEducatorEducatorId");

                    b.ToTable("EducetorReport");
                });

            modelBuilder.Entity("Domain.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastFinishedEducation")
                        .IsRequired()
                        .HasMaxLength(110);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("Domain.EmployeCertificate", b =>
                {
                    b.Property<int>("EmployeId");

                    b.Property<int>("CertificateId");

                    b.HasKey("EmployeId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("EmployeCertificates");
                });

            modelBuilder.Entity("Domain.HealthCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardNumer")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DogId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.ToTable("HealthCards");
                });

            modelBuilder.Entity("Domain.HealthCardVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("HealthCardId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<DateTime>("RecivedAt");

                    b.Property<int>("VaccineId");

                    b.HasKey("Id");

                    b.HasIndex("HealthCardId");

                    b.HasIndex("VaccineId");

                    b.ToTable("HealthCardVaccines");
                });

            modelBuilder.Entity("Domain.MedicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int>("DogId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<int>("VeterinarianId");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.HasIndex("VeterinarianId");

                    b.ToTable("MedicalReports");
                });

            modelBuilder.Entity("Domain.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFree");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime?>("ModifiedAt");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Domain.MedicineMedicalReport", b =>
                {
                    b.Property<int>("MedicalReportId");

                    b.Property<int>("MedicineId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MedicalReportId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineMedicalReports");
                });

            modelBuilder.Entity("Domain.PackageService", b =>
                {
                    b.Property<int>("PackageId");

                    b.Property<int>("ServiceId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("PackageId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PackageServices");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<decimal>("PaidMoney");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.Payout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<decimal>("TakenMoney");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("Domain.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("PhoneNumer")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumer")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Domain.PriceService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("EndAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<decimal>("Price");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("PriceServices");
                });

            modelBuilder.Entity("Domain.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPackage");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Toy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("DogId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ToyDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ToyName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RoleId");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UserSex")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.HasKey("Id");

                    b.HasIndex("VaccineName")
                        .IsUnique();

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.HasOne("Domain.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Dog", b =>
                {
                    b.HasOne("Domain.Race", "Race")
                        .WithMany("Dogs")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.User", "User")
                        .WithMany("Dogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.DogChronichDisease", b =>
                {
                    b.HasOne("Domain.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronichDiseaseDogs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("DogChronichDiseases")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.DogEducator", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("DogEducators")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Employe", "Employe")
                        .WithMany("EducatorDogs")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.User")
                        .WithMany("EducatorDogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.DogHeat", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("DogHeats")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.DogService", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("DogServices")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Service", "Service")
                        .WithMany("ServiceDogs")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.EducetorReport", b =>
                {
                    b.HasOne("Domain.DogEducator", "DogEducator")
                        .WithMany("EducetorReports")
                        .HasForeignKey("DogEducatorDogId", "DogEducatorEducatorId");
                });

            modelBuilder.Entity("Domain.Employe", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithOne("Employe")
                        .HasForeignKey("Domain.Employe", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.EmployeCertificate", b =>
                {
                    b.HasOne("Domain.Certificate", "Certificate")
                        .WithMany("CertificateEmployees")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Employe", "Employe")
                        .WithMany("EmployeCertificates")
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.HealthCard", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("HealthCards")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.HealthCardVaccine", b =>
                {
                    b.HasOne("Domain.HealthCard", "HealthCard")
                        .WithMany("HelthCardVaccines")
                        .HasForeignKey("HealthCardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Vaccine", "Vaccine")
                        .WithMany("VaccineHealthCards")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.MedicalReport", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("DogMedicalReports")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.User", "Veterinarian")
                        .WithMany("VeterinarianMedicalReports")
                        .HasForeignKey("VeterinarianId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.MedicineMedicalReport", b =>
                {
                    b.HasOne("Domain.MedicalReport", "MedicalReport")
                        .WithMany("MedicalReportMedicines")
                        .HasForeignKey("MedicalReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Medicine", "Medicine")
                        .WithMany("MedicineMedicalReports")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.PackageService", b =>
                {
                    b.HasOne("Domain.Service", "Package")
                        .WithMany("PackageServices")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Service", "Service")
                        .WithMany("ServicePackages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Payout", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Payouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Phone", b =>
                {
                    b.HasOne("Domain.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.PriceService", b =>
                {
                    b.HasOne("Domain.Service", "Service")
                        .WithMany("PriceServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Toy", b =>
                {
                    b.HasOne("Domain.Dog", "Dog")
                        .WithMany("Toys")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
